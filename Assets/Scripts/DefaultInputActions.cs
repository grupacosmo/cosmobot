//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/ProjectConfig/DefaultInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Cosmobot
{
    /// <summary>
    /// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/ProjectConfig/DefaultInputActions.inputactions".
    /// </summary>
    /// <remarks>
    /// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
    /// </remarks>
    /// <example>
    /// <code>
    /// using namespace UnityEngine;
    /// using UnityEngine.InputSystem;
    ///
    /// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
    /// public class Example : MonoBehaviour, MyActions.IPlayerActions
    /// {
    ///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
    ///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
    ///
    ///     void Awake()
    ///     {
    ///         m_Actions = new MyActions_Actions();              // Create asset object.
    ///         m_Player = m_Actions.Player;                      // Extract action map object.
    ///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
    ///     }
    ///
    ///     void OnDestroy()
    ///     {
    ///         m_Actions.Dispose();                              // Destroy asset object.
    ///     }
    ///
    ///     void OnEnable()
    ///     {
    ///         m_Player.Enable();                                // Enable all actions within map.
    ///     }
    ///
    ///     void OnDisable()
    ///     {
    ///         m_Player.Disable();                               // Disable all actions within map.
    ///     }
    ///
    ///     #region Interface implementation of MyActions.IPlayerActions
    ///
    ///     // Invoked when "Move" action is either started, performed or canceled.
    ///     public void OnMove(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
    ///     }
    ///
    ///     // Invoked when "Attack" action is either started, performed or canceled.
    ///     public void OnAttack(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
    ///     }
    ///
    ///     #endregion
    /// }
    /// </code>
    /// </example>
    public partial class @DefaultInputActions: IInputActionCollection2, IDisposable
    {
        /// <summary>
        /// Provides access to the underlying asset instance.
        /// </summary>
        public InputActionAsset asset { get; }

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public @DefaultInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""0b76f2c3-3a99-4db1-8a8e-731651b0d56f"",
            ""actions"": [
                {
                    ""name"": ""movement"",
                    ""type"": ""Value"",
                    ""id"": ""583a3c59-aef5-44ec-879b-b8a8420f4413"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""a52c290c-e873-4832-925d-15d7ebdee8cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WSAD"",
                    ""id"": ""fbe0384e-0ed5-40cc-a93c-78162a5e8dea"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6ab5f737-d48f-4e6b-b15e-75e8ffa13d92"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a2647e5e-6aa7-4335-bfe9-3587cd75179e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1c18233a-d12f-4049-807a-17b1d1216fab"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""12c14194-7110-4cdc-bbff-864a581c40b5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""a2dec66c-c51a-4a20-ba75-24807b1abf7b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9db90531-13f2-426b-9fb6-25a1856daa60"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0942ce33-1dba-48b3-84cf-171a7675328d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8e4b59a7-6e27-431c-ac34-4860c9479eea"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bab30291-5a9d-4150-bcf8-49468c5fd832"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cfa0e537-b36d-4304-89a7-d29671c6e0a6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerCamera"",
            ""id"": ""8e621584-24a6-434f-afb7-5bbe85d11be2"",
            ""actions"": [
                {
                    ""name"": ""camera"",
                    ""type"": ""Value"",
                    ""id"": ""c4cf1433-09cd-4fab-be87-842ce20e02b4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""switchView"",
                    ""type"": ""Button"",
                    ""id"": ""104b72e1-39e0-4769-9acd-910a4f80dea7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""zoom"",
                    ""type"": ""Button"",
                    ""id"": ""b298ad49-16e3-4c70-a1e2-79d0cdd79d1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3f4b0925-51cd-4cda-b4ae-1b38ca4df841"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da79b65e-0d14-44f0-ab32-6f2929a5fc37"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""switchView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2b55378-1c0d-469a-ac3f-9342f1f91d56"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Minimap"",
            ""id"": ""937d75ae-f092-46fc-ad81-0a2f41e94b59"",
            ""actions"": [
                {
                    ""name"": ""Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""46a81420-c1a6-435b-aeff-bdfb512c6404"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""13d04ef6-9c13-4c3d-ae4d-a4afcabb07e4"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerGun"",
            ""id"": ""9d2713aa-b648-490b-b1eb-fb411b4d6512"",
            ""actions"": [
                {
                    ""name"": ""shoot"",
                    ""type"": ""Button"",
                    ""id"": ""0f8c47af-d8db-4bac-ab79-c85a2326ba6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""pickup"",
                    ""type"": ""Button"",
                    ""id"": ""5b451df9-5ab6-4ed1-bac3-497b0a359349"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""12bf8558-66df-4230-8831-84fd76b16420"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66420144-d7ce-42f4-916e-7df72986650f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interaction"",
            ""id"": ""87ea07c2-17b4-4bd4-9c97-8e707bc3d096"",
            ""actions"": [
                {
                    ""name"": ""interact"",
                    ""type"": ""Button"",
                    ""id"": ""54f766f1-c186-4d62-ac28-82127740a46f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b5223094-0dd0-4fa5-8380-8e8f01dc6840"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerRoutingTool"",
            ""id"": ""31c51f7f-1001-4cb6-9cd5-47e5790367cb"",
            ""actions"": [
                {
                    ""name"": ""addWaypointToRoute"",
                    ""type"": ""Button"",
                    ""id"": ""56bbef0f-e87a-4605-8d83-a76c26f63581"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""changeReleaseMode"",
                    ""type"": ""Button"",
                    ""id"": ""2d83529a-d50b-447b-848b-0da4e89ca12c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""changeGrabMode"",
                    ""type"": ""Button"",
                    ""id"": ""b89674fd-7d7b-4e50-b82f-70ba8909b161"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""switchRobot"",
                    ""type"": ""Button"",
                    ""id"": ""eeca9117-3ccd-4ff3-8e85-bb2156aa25cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""applyRouteToRobot"",
                    ""type"": ""Button"",
                    ""id"": ""903f15f6-6433-4e02-89e1-c5bf6105143b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""634006ef-e299-4560-b168-a77416ed86f7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""addWaypointToRoute"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78123ab1-832f-489d-aedd-848402129c6d"",
                    ""path"": ""<Keyboard>/f2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""changeReleaseMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46f1d95b-b93d-4a89-92b6-ba8ec19904a1"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""changeGrabMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6af24d83-09b1-4693-8602-6e8caac9df75"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""switchRobot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74c4db3a-4c8a-4e52-87a7-b2466fc7228d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""applyRouteToRobot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BuildingPlacement"",
            ""id"": ""6cf32048-e77c-4665-8a03-3c5d63b231b4"",
            ""actions"": [
                {
                    ""name"": ""cancelPlacement"",
                    ""type"": ""Button"",
                    ""id"": ""480c38c9-721c-4092-8c55-9c5b232362db"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""confirmPlacement"",
                    ""type"": ""Button"",
                    ""id"": ""3503ef88-7009-4be4-964e-009a938eb457"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""rotatePlacement"",
                    ""type"": ""Button"",
                    ""id"": ""f83028df-c50b-40c4-a871-a7c5157a420d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""startPlacementTemp"",
                    ""type"": ""Button"",
                    ""id"": ""48daa551-aa4b-4a70-ab5f-e4f624af6a1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""84d3f752-ee1d-4101-8db6-9388ed07291d"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""cancelPlacement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1074272c-97d5-42e6-9812-a7042f81b4bc"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""confirmPlacement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6997b68-26ce-45a1-a7fc-f120d3063d4d"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotatePlacement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ddd37b2-71ed-43e8-b06f-01a700d6b0a0"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""startPlacementTemp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerMovement
            m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
            m_PlayerMovement_movement = m_PlayerMovement.FindAction("movement", throwIfNotFound: true);
            m_PlayerMovement_jump = m_PlayerMovement.FindAction("jump", throwIfNotFound: true);
            // PlayerCamera
            m_PlayerCamera = asset.FindActionMap("PlayerCamera", throwIfNotFound: true);
            m_PlayerCamera_camera = m_PlayerCamera.FindAction("camera", throwIfNotFound: true);
            m_PlayerCamera_switchView = m_PlayerCamera.FindAction("switchView", throwIfNotFound: true);
            m_PlayerCamera_zoom = m_PlayerCamera.FindAction("zoom", throwIfNotFound: true);
            // Minimap
            m_Minimap = asset.FindActionMap("Minimap", throwIfNotFound: true);
            m_Minimap_Toggle = m_Minimap.FindAction("Toggle", throwIfNotFound: true);
            // PlayerGun
            m_PlayerGun = asset.FindActionMap("PlayerGun", throwIfNotFound: true);
            m_PlayerGun_shoot = m_PlayerGun.FindAction("shoot", throwIfNotFound: true);
            m_PlayerGun_pickup = m_PlayerGun.FindAction("pickup", throwIfNotFound: true);
            // Interaction
            m_Interaction = asset.FindActionMap("Interaction", throwIfNotFound: true);
            m_Interaction_interact = m_Interaction.FindAction("interact", throwIfNotFound: true);
            // PlayerRoutingTool
            m_PlayerRoutingTool = asset.FindActionMap("PlayerRoutingTool", throwIfNotFound: true);
            m_PlayerRoutingTool_addWaypointToRoute = m_PlayerRoutingTool.FindAction("addWaypointToRoute", throwIfNotFound: true);
            m_PlayerRoutingTool_changeReleaseMode = m_PlayerRoutingTool.FindAction("changeReleaseMode", throwIfNotFound: true);
            m_PlayerRoutingTool_changeGrabMode = m_PlayerRoutingTool.FindAction("changeGrabMode", throwIfNotFound: true);
            m_PlayerRoutingTool_switchRobot = m_PlayerRoutingTool.FindAction("switchRobot", throwIfNotFound: true);
            m_PlayerRoutingTool_applyRouteToRobot = m_PlayerRoutingTool.FindAction("applyRouteToRobot", throwIfNotFound: true);
            // BuildingPlacement
            m_BuildingPlacement = asset.FindActionMap("BuildingPlacement", throwIfNotFound: true);
            m_BuildingPlacement_cancelPlacement = m_BuildingPlacement.FindAction("cancelPlacement", throwIfNotFound: true);
            m_BuildingPlacement_confirmPlacement = m_BuildingPlacement.FindAction("confirmPlacement", throwIfNotFound: true);
            m_BuildingPlacement_rotatePlacement = m_BuildingPlacement.FindAction("rotatePlacement", throwIfNotFound: true);
            m_BuildingPlacement_startPlacementTemp = m_BuildingPlacement.FindAction("startPlacementTemp", throwIfNotFound: true);
        }

        ~@DefaultInputActions()
        {
            UnityEngine.Debug.Assert(!m_PlayerMovement.enabled, "This will cause a leak and performance issues, DefaultInputActions.PlayerMovement.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_PlayerCamera.enabled, "This will cause a leak and performance issues, DefaultInputActions.PlayerCamera.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Minimap.enabled, "This will cause a leak and performance issues, DefaultInputActions.Minimap.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_PlayerGun.enabled, "This will cause a leak and performance issues, DefaultInputActions.PlayerGun.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Interaction.enabled, "This will cause a leak and performance issues, DefaultInputActions.Interaction.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_PlayerRoutingTool.enabled, "This will cause a leak and performance issues, DefaultInputActions.PlayerRoutingTool.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_BuildingPlacement.enabled, "This will cause a leak and performance issues, DefaultInputActions.BuildingPlacement.Disable() has not been called.");
        }

        /// <summary>
        /// Destroys this asset and all associated <see cref="InputAction"/> instances.
        /// </summary>
        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
        public void Enable()
        {
            asset.Enable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
        public void Disable()
        {
            asset.Disable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
        public IEnumerable<InputBinding> bindings => asset.bindings;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerMovement
        private readonly InputActionMap m_PlayerMovement;
        private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
        private readonly InputAction m_PlayerMovement_movement;
        private readonly InputAction m_PlayerMovement_jump;
        /// <summary>
        /// Provides access to input actions defined in input action map "PlayerMovement".
        /// </summary>
        public struct PlayerMovementActions
        {
            private @DefaultInputActions m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public PlayerMovementActions(@DefaultInputActions wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "PlayerMovement/movement".
            /// </summary>
            public InputAction @movement => m_Wrapper.m_PlayerMovement_movement;
            /// <summary>
            /// Provides access to the underlying input action "PlayerMovement/jump".
            /// </summary>
            public InputAction @jump => m_Wrapper.m_PlayerMovement_jump;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="PlayerMovementActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="PlayerMovementActions" />
            public void AddCallbacks(IPlayerMovementActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
                @movement.started += instance.OnMovement;
                @movement.performed += instance.OnMovement;
                @movement.canceled += instance.OnMovement;
                @jump.started += instance.OnJump;
                @jump.performed += instance.OnJump;
                @jump.canceled += instance.OnJump;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="PlayerMovementActions" />
            private void UnregisterCallbacks(IPlayerMovementActions instance)
            {
                @movement.started -= instance.OnMovement;
                @movement.performed -= instance.OnMovement;
                @movement.canceled -= instance.OnMovement;
                @jump.started -= instance.OnJump;
                @jump.performed -= instance.OnJump;
                @jump.canceled -= instance.OnJump;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerMovementActions.UnregisterCallbacks(IPlayerMovementActions)" />.
            /// </summary>
            /// <seealso cref="PlayerMovementActions.UnregisterCallbacks(IPlayerMovementActions)" />
            public void RemoveCallbacks(IPlayerMovementActions instance)
            {
                if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="PlayerMovementActions.AddCallbacks(IPlayerMovementActions)" />
            /// <seealso cref="PlayerMovementActions.RemoveCallbacks(IPlayerMovementActions)" />
            /// <seealso cref="PlayerMovementActions.UnregisterCallbacks(IPlayerMovementActions)" />
            public void SetCallbacks(IPlayerMovementActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="PlayerMovementActions" /> instance referencing this action map.
        /// </summary>
        public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

        // PlayerCamera
        private readonly InputActionMap m_PlayerCamera;
        private List<IPlayerCameraActions> m_PlayerCameraActionsCallbackInterfaces = new List<IPlayerCameraActions>();
        private readonly InputAction m_PlayerCamera_camera;
        private readonly InputAction m_PlayerCamera_switchView;
        private readonly InputAction m_PlayerCamera_zoom;
        /// <summary>
        /// Provides access to input actions defined in input action map "PlayerCamera".
        /// </summary>
        public struct PlayerCameraActions
        {
            private @DefaultInputActions m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public PlayerCameraActions(@DefaultInputActions wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "PlayerCamera/camera".
            /// </summary>
            public InputAction @camera => m_Wrapper.m_PlayerCamera_camera;
            /// <summary>
            /// Provides access to the underlying input action "PlayerCamera/switchView".
            /// </summary>
            public InputAction @switchView => m_Wrapper.m_PlayerCamera_switchView;
            /// <summary>
            /// Provides access to the underlying input action "PlayerCamera/zoom".
            /// </summary>
            public InputAction @zoom => m_Wrapper.m_PlayerCamera_zoom;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_PlayerCamera; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="PlayerCameraActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(PlayerCameraActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="PlayerCameraActions" />
            public void AddCallbacks(IPlayerCameraActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerCameraActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerCameraActionsCallbackInterfaces.Add(instance);
                @camera.started += instance.OnCamera;
                @camera.performed += instance.OnCamera;
                @camera.canceled += instance.OnCamera;
                @switchView.started += instance.OnSwitchView;
                @switchView.performed += instance.OnSwitchView;
                @switchView.canceled += instance.OnSwitchView;
                @zoom.started += instance.OnZoom;
                @zoom.performed += instance.OnZoom;
                @zoom.canceled += instance.OnZoom;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="PlayerCameraActions" />
            private void UnregisterCallbacks(IPlayerCameraActions instance)
            {
                @camera.started -= instance.OnCamera;
                @camera.performed -= instance.OnCamera;
                @camera.canceled -= instance.OnCamera;
                @switchView.started -= instance.OnSwitchView;
                @switchView.performed -= instance.OnSwitchView;
                @switchView.canceled -= instance.OnSwitchView;
                @zoom.started -= instance.OnZoom;
                @zoom.performed -= instance.OnZoom;
                @zoom.canceled -= instance.OnZoom;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerCameraActions.UnregisterCallbacks(IPlayerCameraActions)" />.
            /// </summary>
            /// <seealso cref="PlayerCameraActions.UnregisterCallbacks(IPlayerCameraActions)" />
            public void RemoveCallbacks(IPlayerCameraActions instance)
            {
                if (m_Wrapper.m_PlayerCameraActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="PlayerCameraActions.AddCallbacks(IPlayerCameraActions)" />
            /// <seealso cref="PlayerCameraActions.RemoveCallbacks(IPlayerCameraActions)" />
            /// <seealso cref="PlayerCameraActions.UnregisterCallbacks(IPlayerCameraActions)" />
            public void SetCallbacks(IPlayerCameraActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerCameraActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerCameraActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="PlayerCameraActions" /> instance referencing this action map.
        /// </summary>
        public PlayerCameraActions @PlayerCamera => new PlayerCameraActions(this);

        // Minimap
        private readonly InputActionMap m_Minimap;
        private List<IMinimapActions> m_MinimapActionsCallbackInterfaces = new List<IMinimapActions>();
        private readonly InputAction m_Minimap_Toggle;
        /// <summary>
        /// Provides access to input actions defined in input action map "Minimap".
        /// </summary>
        public struct MinimapActions
        {
            private @DefaultInputActions m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public MinimapActions(@DefaultInputActions wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "Minimap/Toggle".
            /// </summary>
            public InputAction @Toggle => m_Wrapper.m_Minimap_Toggle;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_Minimap; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="MinimapActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(MinimapActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="MinimapActions" />
            public void AddCallbacks(IMinimapActions instance)
            {
                if (instance == null || m_Wrapper.m_MinimapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MinimapActionsCallbackInterfaces.Add(instance);
                @Toggle.started += instance.OnToggle;
                @Toggle.performed += instance.OnToggle;
                @Toggle.canceled += instance.OnToggle;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="MinimapActions" />
            private void UnregisterCallbacks(IMinimapActions instance)
            {
                @Toggle.started -= instance.OnToggle;
                @Toggle.performed -= instance.OnToggle;
                @Toggle.canceled -= instance.OnToggle;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="MinimapActions.UnregisterCallbacks(IMinimapActions)" />.
            /// </summary>
            /// <seealso cref="MinimapActions.UnregisterCallbacks(IMinimapActions)" />
            public void RemoveCallbacks(IMinimapActions instance)
            {
                if (m_Wrapper.m_MinimapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="MinimapActions.AddCallbacks(IMinimapActions)" />
            /// <seealso cref="MinimapActions.RemoveCallbacks(IMinimapActions)" />
            /// <seealso cref="MinimapActions.UnregisterCallbacks(IMinimapActions)" />
            public void SetCallbacks(IMinimapActions instance)
            {
                foreach (var item in m_Wrapper.m_MinimapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MinimapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="MinimapActions" /> instance referencing this action map.
        /// </summary>
        public MinimapActions @Minimap => new MinimapActions(this);

        // PlayerGun
        private readonly InputActionMap m_PlayerGun;
        private List<IPlayerGunActions> m_PlayerGunActionsCallbackInterfaces = new List<IPlayerGunActions>();
        private readonly InputAction m_PlayerGun_shoot;
        private readonly InputAction m_PlayerGun_pickup;
        /// <summary>
        /// Provides access to input actions defined in input action map "PlayerGun".
        /// </summary>
        public struct PlayerGunActions
        {
            private @DefaultInputActions m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public PlayerGunActions(@DefaultInputActions wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "PlayerGun/shoot".
            /// </summary>
            public InputAction @shoot => m_Wrapper.m_PlayerGun_shoot;
            /// <summary>
            /// Provides access to the underlying input action "PlayerGun/pickup".
            /// </summary>
            public InputAction @pickup => m_Wrapper.m_PlayerGun_pickup;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_PlayerGun; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="PlayerGunActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(PlayerGunActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="PlayerGunActions" />
            public void AddCallbacks(IPlayerGunActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerGunActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerGunActionsCallbackInterfaces.Add(instance);
                @shoot.started += instance.OnShoot;
                @shoot.performed += instance.OnShoot;
                @shoot.canceled += instance.OnShoot;
                @pickup.started += instance.OnPickup;
                @pickup.performed += instance.OnPickup;
                @pickup.canceled += instance.OnPickup;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="PlayerGunActions" />
            private void UnregisterCallbacks(IPlayerGunActions instance)
            {
                @shoot.started -= instance.OnShoot;
                @shoot.performed -= instance.OnShoot;
                @shoot.canceled -= instance.OnShoot;
                @pickup.started -= instance.OnPickup;
                @pickup.performed -= instance.OnPickup;
                @pickup.canceled -= instance.OnPickup;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerGunActions.UnregisterCallbacks(IPlayerGunActions)" />.
            /// </summary>
            /// <seealso cref="PlayerGunActions.UnregisterCallbacks(IPlayerGunActions)" />
            public void RemoveCallbacks(IPlayerGunActions instance)
            {
                if (m_Wrapper.m_PlayerGunActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="PlayerGunActions.AddCallbacks(IPlayerGunActions)" />
            /// <seealso cref="PlayerGunActions.RemoveCallbacks(IPlayerGunActions)" />
            /// <seealso cref="PlayerGunActions.UnregisterCallbacks(IPlayerGunActions)" />
            public void SetCallbacks(IPlayerGunActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerGunActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerGunActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="PlayerGunActions" /> instance referencing this action map.
        /// </summary>
        public PlayerGunActions @PlayerGun => new PlayerGunActions(this);

        // Interaction
        private readonly InputActionMap m_Interaction;
        private List<IInteractionActions> m_InteractionActionsCallbackInterfaces = new List<IInteractionActions>();
        private readonly InputAction m_Interaction_interact;
        /// <summary>
        /// Provides access to input actions defined in input action map "Interaction".
        /// </summary>
        public struct InteractionActions
        {
            private @DefaultInputActions m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public InteractionActions(@DefaultInputActions wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "Interaction/interact".
            /// </summary>
            public InputAction @interact => m_Wrapper.m_Interaction_interact;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_Interaction; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="InteractionActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(InteractionActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="InteractionActions" />
            public void AddCallbacks(IInteractionActions instance)
            {
                if (instance == null || m_Wrapper.m_InteractionActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_InteractionActionsCallbackInterfaces.Add(instance);
                @interact.started += instance.OnInteract;
                @interact.performed += instance.OnInteract;
                @interact.canceled += instance.OnInteract;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="InteractionActions" />
            private void UnregisterCallbacks(IInteractionActions instance)
            {
                @interact.started -= instance.OnInteract;
                @interact.performed -= instance.OnInteract;
                @interact.canceled -= instance.OnInteract;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="InteractionActions.UnregisterCallbacks(IInteractionActions)" />.
            /// </summary>
            /// <seealso cref="InteractionActions.UnregisterCallbacks(IInteractionActions)" />
            public void RemoveCallbacks(IInteractionActions instance)
            {
                if (m_Wrapper.m_InteractionActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="InteractionActions.AddCallbacks(IInteractionActions)" />
            /// <seealso cref="InteractionActions.RemoveCallbacks(IInteractionActions)" />
            /// <seealso cref="InteractionActions.UnregisterCallbacks(IInteractionActions)" />
            public void SetCallbacks(IInteractionActions instance)
            {
                foreach (var item in m_Wrapper.m_InteractionActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_InteractionActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="InteractionActions" /> instance referencing this action map.
        /// </summary>
        public InteractionActions @Interaction => new InteractionActions(this);

        // PlayerRoutingTool
        private readonly InputActionMap m_PlayerRoutingTool;
        private List<IPlayerRoutingToolActions> m_PlayerRoutingToolActionsCallbackInterfaces = new List<IPlayerRoutingToolActions>();
        private readonly InputAction m_PlayerRoutingTool_addWaypointToRoute;
        private readonly InputAction m_PlayerRoutingTool_changeReleaseMode;
        private readonly InputAction m_PlayerRoutingTool_changeGrabMode;
        private readonly InputAction m_PlayerRoutingTool_switchRobot;
        private readonly InputAction m_PlayerRoutingTool_applyRouteToRobot;
        /// <summary>
        /// Provides access to input actions defined in input action map "PlayerRoutingTool".
        /// </summary>
        public struct PlayerRoutingToolActions
        {
            private @DefaultInputActions m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public PlayerRoutingToolActions(@DefaultInputActions wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "PlayerRoutingTool/addWaypointToRoute".
            /// </summary>
            public InputAction @addWaypointToRoute => m_Wrapper.m_PlayerRoutingTool_addWaypointToRoute;
            /// <summary>
            /// Provides access to the underlying input action "PlayerRoutingTool/changeReleaseMode".
            /// </summary>
            public InputAction @changeReleaseMode => m_Wrapper.m_PlayerRoutingTool_changeReleaseMode;
            /// <summary>
            /// Provides access to the underlying input action "PlayerRoutingTool/changeGrabMode".
            /// </summary>
            public InputAction @changeGrabMode => m_Wrapper.m_PlayerRoutingTool_changeGrabMode;
            /// <summary>
            /// Provides access to the underlying input action "PlayerRoutingTool/switchRobot".
            /// </summary>
            public InputAction @switchRobot => m_Wrapper.m_PlayerRoutingTool_switchRobot;
            /// <summary>
            /// Provides access to the underlying input action "PlayerRoutingTool/applyRouteToRobot".
            /// </summary>
            public InputAction @applyRouteToRobot => m_Wrapper.m_PlayerRoutingTool_applyRouteToRobot;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_PlayerRoutingTool; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="PlayerRoutingToolActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(PlayerRoutingToolActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="PlayerRoutingToolActions" />
            public void AddCallbacks(IPlayerRoutingToolActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerRoutingToolActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerRoutingToolActionsCallbackInterfaces.Add(instance);
                @addWaypointToRoute.started += instance.OnAddWaypointToRoute;
                @addWaypointToRoute.performed += instance.OnAddWaypointToRoute;
                @addWaypointToRoute.canceled += instance.OnAddWaypointToRoute;
                @changeReleaseMode.started += instance.OnChangeReleaseMode;
                @changeReleaseMode.performed += instance.OnChangeReleaseMode;
                @changeReleaseMode.canceled += instance.OnChangeReleaseMode;
                @changeGrabMode.started += instance.OnChangeGrabMode;
                @changeGrabMode.performed += instance.OnChangeGrabMode;
                @changeGrabMode.canceled += instance.OnChangeGrabMode;
                @switchRobot.started += instance.OnSwitchRobot;
                @switchRobot.performed += instance.OnSwitchRobot;
                @switchRobot.canceled += instance.OnSwitchRobot;
                @applyRouteToRobot.started += instance.OnApplyRouteToRobot;
                @applyRouteToRobot.performed += instance.OnApplyRouteToRobot;
                @applyRouteToRobot.canceled += instance.OnApplyRouteToRobot;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="PlayerRoutingToolActions" />
            private void UnregisterCallbacks(IPlayerRoutingToolActions instance)
            {
                @addWaypointToRoute.started -= instance.OnAddWaypointToRoute;
                @addWaypointToRoute.performed -= instance.OnAddWaypointToRoute;
                @addWaypointToRoute.canceled -= instance.OnAddWaypointToRoute;
                @changeReleaseMode.started -= instance.OnChangeReleaseMode;
                @changeReleaseMode.performed -= instance.OnChangeReleaseMode;
                @changeReleaseMode.canceled -= instance.OnChangeReleaseMode;
                @changeGrabMode.started -= instance.OnChangeGrabMode;
                @changeGrabMode.performed -= instance.OnChangeGrabMode;
                @changeGrabMode.canceled -= instance.OnChangeGrabMode;
                @switchRobot.started -= instance.OnSwitchRobot;
                @switchRobot.performed -= instance.OnSwitchRobot;
                @switchRobot.canceled -= instance.OnSwitchRobot;
                @applyRouteToRobot.started -= instance.OnApplyRouteToRobot;
                @applyRouteToRobot.performed -= instance.OnApplyRouteToRobot;
                @applyRouteToRobot.canceled -= instance.OnApplyRouteToRobot;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerRoutingToolActions.UnregisterCallbacks(IPlayerRoutingToolActions)" />.
            /// </summary>
            /// <seealso cref="PlayerRoutingToolActions.UnregisterCallbacks(IPlayerRoutingToolActions)" />
            public void RemoveCallbacks(IPlayerRoutingToolActions instance)
            {
                if (m_Wrapper.m_PlayerRoutingToolActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="PlayerRoutingToolActions.AddCallbacks(IPlayerRoutingToolActions)" />
            /// <seealso cref="PlayerRoutingToolActions.RemoveCallbacks(IPlayerRoutingToolActions)" />
            /// <seealso cref="PlayerRoutingToolActions.UnregisterCallbacks(IPlayerRoutingToolActions)" />
            public void SetCallbacks(IPlayerRoutingToolActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerRoutingToolActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerRoutingToolActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="PlayerRoutingToolActions" /> instance referencing this action map.
        /// </summary>
        public PlayerRoutingToolActions @PlayerRoutingTool => new PlayerRoutingToolActions(this);

        // BuildingPlacement
        private readonly InputActionMap m_BuildingPlacement;
        private List<IBuildingPlacementActions> m_BuildingPlacementActionsCallbackInterfaces = new List<IBuildingPlacementActions>();
        private readonly InputAction m_BuildingPlacement_cancelPlacement;
        private readonly InputAction m_BuildingPlacement_confirmPlacement;
        private readonly InputAction m_BuildingPlacement_rotatePlacement;
        private readonly InputAction m_BuildingPlacement_startPlacementTemp;
        /// <summary>
        /// Provides access to input actions defined in input action map "BuildingPlacement".
        /// </summary>
        public struct BuildingPlacementActions
        {
            private @DefaultInputActions m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public BuildingPlacementActions(@DefaultInputActions wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "BuildingPlacement/cancelPlacement".
            /// </summary>
            public InputAction @cancelPlacement => m_Wrapper.m_BuildingPlacement_cancelPlacement;
            /// <summary>
            /// Provides access to the underlying input action "BuildingPlacement/confirmPlacement".
            /// </summary>
            public InputAction @confirmPlacement => m_Wrapper.m_BuildingPlacement_confirmPlacement;
            /// <summary>
            /// Provides access to the underlying input action "BuildingPlacement/rotatePlacement".
            /// </summary>
            public InputAction @rotatePlacement => m_Wrapper.m_BuildingPlacement_rotatePlacement;
            /// <summary>
            /// Provides access to the underlying input action "BuildingPlacement/startPlacementTemp".
            /// </summary>
            public InputAction @startPlacementTemp => m_Wrapper.m_BuildingPlacement_startPlacementTemp;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_BuildingPlacement; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="BuildingPlacementActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(BuildingPlacementActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="BuildingPlacementActions" />
            public void AddCallbacks(IBuildingPlacementActions instance)
            {
                if (instance == null || m_Wrapper.m_BuildingPlacementActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_BuildingPlacementActionsCallbackInterfaces.Add(instance);
                @cancelPlacement.started += instance.OnCancelPlacement;
                @cancelPlacement.performed += instance.OnCancelPlacement;
                @cancelPlacement.canceled += instance.OnCancelPlacement;
                @confirmPlacement.started += instance.OnConfirmPlacement;
                @confirmPlacement.performed += instance.OnConfirmPlacement;
                @confirmPlacement.canceled += instance.OnConfirmPlacement;
                @rotatePlacement.started += instance.OnRotatePlacement;
                @rotatePlacement.performed += instance.OnRotatePlacement;
                @rotatePlacement.canceled += instance.OnRotatePlacement;
                @startPlacementTemp.started += instance.OnStartPlacementTemp;
                @startPlacementTemp.performed += instance.OnStartPlacementTemp;
                @startPlacementTemp.canceled += instance.OnStartPlacementTemp;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="BuildingPlacementActions" />
            private void UnregisterCallbacks(IBuildingPlacementActions instance)
            {
                @cancelPlacement.started -= instance.OnCancelPlacement;
                @cancelPlacement.performed -= instance.OnCancelPlacement;
                @cancelPlacement.canceled -= instance.OnCancelPlacement;
                @confirmPlacement.started -= instance.OnConfirmPlacement;
                @confirmPlacement.performed -= instance.OnConfirmPlacement;
                @confirmPlacement.canceled -= instance.OnConfirmPlacement;
                @rotatePlacement.started -= instance.OnRotatePlacement;
                @rotatePlacement.performed -= instance.OnRotatePlacement;
                @rotatePlacement.canceled -= instance.OnRotatePlacement;
                @startPlacementTemp.started -= instance.OnStartPlacementTemp;
                @startPlacementTemp.performed -= instance.OnStartPlacementTemp;
                @startPlacementTemp.canceled -= instance.OnStartPlacementTemp;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="BuildingPlacementActions.UnregisterCallbacks(IBuildingPlacementActions)" />.
            /// </summary>
            /// <seealso cref="BuildingPlacementActions.UnregisterCallbacks(IBuildingPlacementActions)" />
            public void RemoveCallbacks(IBuildingPlacementActions instance)
            {
                if (m_Wrapper.m_BuildingPlacementActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="BuildingPlacementActions.AddCallbacks(IBuildingPlacementActions)" />
            /// <seealso cref="BuildingPlacementActions.RemoveCallbacks(IBuildingPlacementActions)" />
            /// <seealso cref="BuildingPlacementActions.UnregisterCallbacks(IBuildingPlacementActions)" />
            public void SetCallbacks(IBuildingPlacementActions instance)
            {
                foreach (var item in m_Wrapper.m_BuildingPlacementActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_BuildingPlacementActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="BuildingPlacementActions" /> instance referencing this action map.
        /// </summary>
        public BuildingPlacementActions @BuildingPlacement => new BuildingPlacementActions(this);
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "PlayerMovement" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="PlayerMovementActions.AddCallbacks(IPlayerMovementActions)" />
        /// <seealso cref="PlayerMovementActions.RemoveCallbacks(IPlayerMovementActions)" />
        public interface IPlayerMovementActions
        {
            /// <summary>
            /// Method invoked when associated input action "movement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnMovement(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "jump" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnJump(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "PlayerCamera" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="PlayerCameraActions.AddCallbacks(IPlayerCameraActions)" />
        /// <seealso cref="PlayerCameraActions.RemoveCallbacks(IPlayerCameraActions)" />
        public interface IPlayerCameraActions
        {
            /// <summary>
            /// Method invoked when associated input action "camera" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnCamera(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "switchView" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnSwitchView(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "zoom" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnZoom(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Minimap" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="MinimapActions.AddCallbacks(IMinimapActions)" />
        /// <seealso cref="MinimapActions.RemoveCallbacks(IMinimapActions)" />
        public interface IMinimapActions
        {
            /// <summary>
            /// Method invoked when associated input action "Toggle" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnToggle(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "PlayerGun" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="PlayerGunActions.AddCallbacks(IPlayerGunActions)" />
        /// <seealso cref="PlayerGunActions.RemoveCallbacks(IPlayerGunActions)" />
        public interface IPlayerGunActions
        {
            /// <summary>
            /// Method invoked when associated input action "shoot" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnShoot(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "pickup" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnPickup(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Interaction" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="InteractionActions.AddCallbacks(IInteractionActions)" />
        /// <seealso cref="InteractionActions.RemoveCallbacks(IInteractionActions)" />
        public interface IInteractionActions
        {
            /// <summary>
            /// Method invoked when associated input action "interact" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnInteract(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "PlayerRoutingTool" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="PlayerRoutingToolActions.AddCallbacks(IPlayerRoutingToolActions)" />
        /// <seealso cref="PlayerRoutingToolActions.RemoveCallbacks(IPlayerRoutingToolActions)" />
        public interface IPlayerRoutingToolActions
        {
            /// <summary>
            /// Method invoked when associated input action "addWaypointToRoute" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnAddWaypointToRoute(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "changeReleaseMode" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnChangeReleaseMode(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "changeGrabMode" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnChangeGrabMode(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "switchRobot" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnSwitchRobot(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "applyRouteToRobot" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnApplyRouteToRobot(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "BuildingPlacement" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="BuildingPlacementActions.AddCallbacks(IBuildingPlacementActions)" />
        /// <seealso cref="BuildingPlacementActions.RemoveCallbacks(IBuildingPlacementActions)" />
        public interface IBuildingPlacementActions
        {
            /// <summary>
            /// Method invoked when associated input action "cancelPlacement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnCancelPlacement(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "confirmPlacement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnConfirmPlacement(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "rotatePlacement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnRotatePlacement(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "startPlacementTemp" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnStartPlacementTemp(InputAction.CallbackContext context);
        }
    }
}
